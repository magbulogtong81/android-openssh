name: C/C++ CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: uraimo/run-on-arch-action@v2.0.5
      id: runcmd
      with:
        arch: aarch64
        distro: ubuntu20.04
        
        githubToken: ${{ github.token }}
        
        setup: |
            mkdir -p "${PWD}"
            
        dockerRunArgs: |
            --volume "${PWD}/workdir"
            
        env: | # YAML, but pipe character is necessary
            artifact_name: git-ubuntu20.04_aarch64
    
        install: |
          apt-get update -q -y
          apt-get install gcc wget automake busybox tar make gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu autoconf git -q -y
        
        run: |
          #zlib
          export PATH_HOME=/workdir
          echo "=============================="
          echo "work directory is: $PATH_HOME"
          echo "=============================="
          echo "downloading zlib..."
          echo "=============================="
          wget https://zlib.net/zlib-1.2.11.tar.gz
          echo "=============================="
          echo "creating directories..."
          echo "=============================="
          mkdir zlib-source -p
          mkdir zlib-arm -p
          echo "=============================="
          echo "extracting zlib"
          echo "=============================="
          tar -xvf zlib-1.2.11.tar.gz -C zlib-source
          echo "=============================="
          echo "going to directory $PATH_HOME/zlib-source/zlib-1.2.11"
          echo "=============================="
          cd zlib-source/zlib-1.2.11
          CC=aarch64-linux-gnu-gcc
          echo "=============================="
          echo "running configure"
          echo "=============================="
          ./configure --prefix=$PATH_HOME/zlib-arm
          echo "=============================="
          echo "running make & make install"
          echo "=============================="
          make
          make install
        
          #openssl
          echo "=============================="
          echo "going back to work dir"
          echo "=============================="
          cd $PATH_HOME
          mkdir openssl-arm
          echo "=============================="
          echo "downloading openssl"
          echo "=============================="
          git clone https://github.com/openssl/openssl.git

          echo "=============================="
          echo " going to dir $PATH_HOME/openssl"
          echo "=============================="
          cd openssl
          export cross=aarch64-linux-gnu-

          echo "=============================="
          echo "running configure"
          echo "=============================="
          ./Configure linux-aarch64 --prefix=$PATH_HOME/openssl-arm

          echo "=============================="
          echo "running make
          echo "=============================="
          make CC="${cross}gcc" AR="${cross}ar r" RANLIB="${cross}ranlib"

          echo "=============================="
          echo "running make install
          echo "=============================="
          make CC="${cross}gcc" AR="${cross}ar r" RANLIB="${cross}ranlib" install

          cd $PATH_HOME
          mkdir build
          echo "=============================="
            echo "work dir is: $PATH_HOME"
          echo "=============================="
          autoreconf
          ./configure CFLAGS="-static" \
          --enable-mpers=check --prefix=`pwd`/build --with-libs --with-zlib=$PATH_HOME/zlib-arm \
          --with-ssl-dir=$PATH_HOME/openssl-arm --disable-etc-default-login CC=aarch64-linux-gnu-gcc \
          AR=aarch64-linux-gnu-ar
          
          make LDFLAGS="-all-static"
          make install

      
    - name: Show the artifact
      run: |
          ls -al "${PWD}/workdir/build"
      
    - name: upload artifact
      uses: actions/upload-artifact@v2
      with:
          name: openssh-android
          path: workdir/build/*
